#include <mpi.h>

int MPI_FlattreeColectiva(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm) {
	int rango, nprocs, out;
	double *recv;

	MPI_Comm_rank(comm, &rango);
	MPI_Comm_size(comm, &nprocs);

	out = MPI_SUCCESS;

	if(rango != root) {
		out = MPI_Send(sendbuf, count, datatype, root, 1, comm);
	} else {
		recv = malloc(sizeof(double) * count);
		memcpy(recvbuf, sendbuf, count*sizeof(double));

		for(int i = 0; i < nprocs; i++) {
			if(i == root)
				continue;

			out = MPI_Recv(recv, count, datatype, i, 1, comm, MPI_STATUS_IGNORE);

			for(int j = 0; j < count; j++) {
				((double *)recvbuf)[j] += recv[j];
			}
		}

		free(recv);
	}

	return out;
}
